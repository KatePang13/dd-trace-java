plugins {
  id 'io.franzbecker.gradle-lombok' version '4.0.0'

  id 'org.unbroken-dome.test-sets' version '3.0.1'
  id 'com.github.ben-manes.versions' version '0.27.0'

  id 'com.diffplug.gradle.spotless' version '4.3.0'
  id 'com.github.spotbugs' version '4.6.0'
  id 'com.dorongold.task-tree' version '1.5'
  id 'pl.allegro.tech.build.axion-release' version '1.10.3'
  id 'io.github.gradle-nexus.publish-plugin' version '1.0.0'
}

description = 'dd-trace-java'

def isCI = System.getenv("CI") != null

apply from: "$rootDir/gradle/scm.gradle"
apply from: "$rootDir/gradle/spotless.gradle"

allprojects {
  group = 'com.datadoghq'
  version = scmVersion.version

  if (isCI) {
    buildDir = "$rootDir/workspace/${projectDir.path.replace(rootDir.path, '')}/build/"
  }

  apply from: "$rootDir/gradle/dependencies.gradle"
  apply from: "$rootDir/gradle/util.gradle"
}

repositories {
  mavenLocal()
  mavenCentral()
  jcenter()
}

tasks.register("latestDepTest")

nexusPublishing {
  repositories {
    def forceLocal = project.hasProperty('forceLocal') && forceLocal
    if (forceLocal && !isCI) {
      local {
        // For testing use with https://hub.docker.com/r/sonatype/nexus
        // docker run --rm -d -p 8081:8081 --name nexus sonatype/nexus
        // Doesn't work for testing releases though... (due to staging)
        nexusUrl = uri("http://localhost:8081/nexus/content/repositories/releases/")
        snapshotRepositoryUrl = uri("http://localhost:8081/nexus/content/repositories/snapshots/")
        username = "admin"
        password = "admin123"
      }
    } else {
      sonatype {
        username = System.getenv("SONATYPE_USERNAME")
        password = System.getenv("SONATYPE_PASSWORD")
      }
    }
  }
}

verifyLombok.enabled = false
installLombok.enabled = false

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

allprojects {
  tasks.withType(JavaForkOptions).configureEach {
    maxHeapSize = System.properties["datadog.forkedMaxHeapSize"]
    minHeapSize = System.properties["datadog.forkedMinHeapSize"]
    jvmArgs "-XX:ErrorFile=/tmp/hs_err_pid%p.log"
  }
}

task writeMuzzleTasksToFile {
  doLast {
    def muzzleFile = file("${buildDir}/muzzleTasks")
    assert muzzleFile.parentFile.mkdirs() || muzzleFile.parentFile.directory

    muzzleFile.text = subprojects.findAll { subproject -> subproject.plugins.hasPlugin('muzzle') }
    .collect { it.path + ":muzzle" }
    .join('\n')
  }
}
